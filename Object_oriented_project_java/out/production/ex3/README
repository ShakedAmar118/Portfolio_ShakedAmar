shaked.amar1,hila.gani
322368390,212640841

SubImgCharMatcher: Responsible for matching a sub-image (represented by its brightness)
to the closest character from a user-defined charset. This class manages both the raw
and normalized brightness values of characters and supports three rounding modes (ABS,
UP, DOWN) using a custom Round enum we defined. It allows adding and removing characters,
and handles efficient mapping from brightness to character.
CharsBrightnesses: A singleton class used to store and cache the raw brightness value of
each ASCII character. Since these values only depend on the character shape and are reused
across runs, we implemented it as a singleton to avoid recomputation and unnecessary
memory duplication.
Round (enum): A custom enumeration that defines the rounding method to be used when
choosing the closest character by brightness. The available options are ABS
(absolute value), UP, and DOWN. It allows clean and type-safe management of
rounding behavior across the program.
AsciiArtAlgorithm: The main algorithm class that performs the ASCII conversion.
It uses a 2D array of brightness values (not the image itself), along with the current
rounding mode and charset matcher, and maps each one to the best-matching character.
A new instance of this class is created per run, as required.
SubImgBrightnesses: A class responsible for computing and caching the normalized brightness
values of square sub-images derived from a padded image. It ensures brightnesses are computed
only when needed or when the resolution changes. This separation supports efficiency and
follows the optimization described in section 1.5.1.
Shell: Implements the user interface and manages the global state of the program
(current charset, resolution, rounding mode, output mode, etc.). It parses and
executes all user commands and coordinates interactions with the core components
of the system.
ImageUtility: A static utility class that provides helper functions for working
with images, such as padding them to the next power-of-two dimensions and
splitting them into sub-images. We added this class to separate low-level
image logic from the algorithm and keep the code modular, clean, and testable.

TreeSet<Character> (charSet in SubImgCharMatcher):
Used to store the active character set in sorted ASCII order.
This ensures fast membership checks (O(log n)), supports consistent
iteration for printing (chars command), and allows ordered traversal
when rebuilding the brightness map.
Chosen over HashSet to guarantee order without post-sorting.
HashMap<Character, Double> (charsBrightnessesMap in CharsBrightnesses):
Caches the raw brightness of each character. Brightness is computed once
(cost: O(1) per character) and reused across runs.
Lookup is constant time (O(1)), and memory cost is proportional to the 
number of unique characters added (up to ~95).
TreeMap<Double, TreeSet<Character>> (normalBrightnessMap in SubImgCharMatcher):
Stores normalized brightness values as keys, mapping to all characters sharing
that brightness.
TreeMap provides logarithmic access (O(log n)) to the closest key using 
floorKey()/ceilingKey()/firstEntry(), essential for efficient rounding logic.
TreeSet ensures characters in each group are sorted by ASCII value, so ties
are resolved deterministically in O(1) per group.
Memory use grows linearly with the number of normalized 
brightness groups (typically small).
Combination of HashMap and TreeMap in SubImgCharMatcher:
We use HashMap to maintain raw brightness values for 
normalization, and TreeMap for fast matching.
This allows us to only rebuild the normalized map when 
min/max brightness changes, reducing recomputation and 
improving runtime in interactive scenarios.
This separation improves both cacheability and performance, 
trading minimal memory for significant runtime gain.
double[][] (conceptually in AsciiArtAlgorithm):
Used for caching brightness values of sub-images (optional 
optimization per section 1.5.1).
Runtime for brightness computation is O(n) where n is the 
number of sub-images; caching reduces this to O(1) per reuse.
Memory cost is O(r²) where r is the number of tiles per row (resolution).
String[], StringBuilder, String.format() (in Shell):
Used for parsing and formatting user input and output. 
These structures are lightweight and provide linear-time string handling.

IncorrectFormatException:
Thrown whenever a command has a valid keyword (add, remove, res, round, etc.)
but an invalid format or illegal argument (e.g., invalid character, wrong 
syntax, out-of-bounds range). This allows us to clearly separate format issues
from other types of errors.
TooSmallCharsetException:
Thrown specifically in handleAsciiArtCommand() when the character set contains
fewer than 2 characters, making it impossible to execute the ASCII conversion.
The exception ensures that invalid runs are rejected before any computation.
ExceedingBoundariesException:
Thrown when the user attempts to increase or decrease the resolution beyond 
the image's logical limits (as defined by the padded dimensions and minimum 
resolution). This avoids producing distorted or invalid output.
IncorrectCommandException:
Thrown at the end of each command cycle if no known command was recognized. 
This ensures that any unrecognized input is caught and reported as “Did not 
execute due to incorrect command.” It helps guide the user without crashing or ignoring mistakes.
All exceptions inherit from RuntimeException to avoid mandatory throws declarations and reduce verbosity.

public int getCharsetSize()
Required to check whether the charset contains at least two characters 
before running the algorithm, as specified in section 2.8. Without this 
method, the Shell class would have no clean way to validate charset size.
public void setRound(Round round)
Allows updating the rounding mode used in the brightness matching logic. 
This is essential to support the round command in the interactive interface.
Since rounding is part of the character selection algorithm, 
it must be exposed and updatable from outside.
public String toString()
Overridden to return the current charset in sorted ASCII order with space 
separation, exactly as required for the output of the chars command (section 2.3). 
Without this, printing the charset would require exposing internal structures or 
duplicating logic outside the matcher.


